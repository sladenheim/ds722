---
title: "Orthogonality and Projections"
jupyter: python3
---

## Lecture Overview

Many important algorithms in (numerical) linear algebra are based on orthogonality and projections.

This lecture sets the stage for our future understanding of

:::: {.incremental}
- QR factorization
- Least squares
- Singular Value Decomposition (PCA)
::::


## Lecture Objectives

- Define orthogonal vectors and orthogonal matrices
- Define and understand projection matrices

## Notation

A vector $\mathbf{v}$ is a unit vector (normalized) if $\Vert \mathbf{v}\Vert_2 = 1$.

A matrix $Q\in\mathbb{R}^{n\times n}$ is symmetric if $Q=Q^{T}$.

## Orthogonal Vectors

Two vectors $\mathbf{q}_1$ and $\mathbf{q}_2$ are orthogonal when

$$
\mathbf{q}_{2}^{T}\mathbf{q}_1 = 0.
$$

A set of vectors $S = \{\mathbf{q}_1, \mathbf{q}_2, \ldots, \mathbf{q}_n \}$ are orthogonal if every pair of vectors is orthogonal, i.e.,

$$
\mathbf{q}_{2}^{T}\mathbf{q}_1 = 0 \quad \text{for all} \quad i\neq j.
$$

A set of vectors $S$ is orthonormal if every vector in S is orthogonal and is a unit vector.

---

**Theorem**
The vectors in an orthogonal set $S$ are linearly independent.

## Components of a Vector

Inner products can be used used to decompose arbitrary vectors into orthogonal components.

Consider a set $S = \{\mathbf{q}_1, \mathbf{q}_2, \ldots \mathbf{q}_n \}$ of $m$-dimensional orthonormal vectors and let $\mathbf{v}$ be an arbitrary vector.

The quantity $\mathbf{q}_{j}^T\mathbf{v}$ is a scalar and we will use these as coordinates in the

--- 

Observe that the vector 

$$
\mathbf{r} = \mathbf{v} - (\mathbf{q}_{1}^T\mathbf{v})\mathbf{q}_{1} - (\mathbf{q}_{2}^T\mathbf{v})\mathbf{q}_{2} - \cdots - (\mathbf{q}_{n}^T\mathbf{v})\mathbf{q}_{n}
$$

is orthogonal to $S$.

Consequently we can always express

$$
\mathbf{v} = \mathbf{r} + \sum_{i=1}^{n}(\mathbf{q}_{i}^T\mathbf{v})\mathbf{q}_{i} = \mathbf{r} + \sum_{i=1}^{n}(\mathbf{q}_{i}\mathbf{q}_{i}^T)\mathbf{v}. 
$$


---

Consider the vector and orthonormal set

$$
\mathbf{v} = 
\begin{bmatrix}
1 \\
-1 \\
3 \\
\end{bmatrix},
\qquad
S = 
\left\{
\begin{bmatrix}
1 \\
0 \\
0 \\
\end{bmatrix},
\begin{bmatrix}
0 \\
1 \\
0 \\
\end{bmatrix}
\right\}.
$$

Let's calculate the decomposition

$$
\mathbf{v} = \mathbf{r} + (\mathbf{q}_{1}^T\mathbf{v})\mathbf{q}_{1} - (\mathbf{q}_{2}^T\mathbf{v})\mathbf{q}_{2}.
$$

## Orthogonal Matrices

A square matrix $Q\in\mathbb{R}^{m\times m}$ is orthogonal if $Q^{T}Q = QQ^{T} = I$.

Equivalently, $Q^{T} = Q^{-1}$, i.e., the transpose of $Q$ is the inverse of $Q$.

This is an important subclass of matrices.

If the matrix $Q\in\mathbb{C}^{m\times m}$ and $Q^{*}Q = QQ^{*} = I$, we say the matrix is unitary.


## Projectors

A projector is a square matrix $P$ that satisfies

$$
P^{2} = P.
$$

There are two kinds of projectors:

- orthogonal
- oblique (non-orthogonal)

---

Imagine we shine a light onto the subspace $\operatorname{range}(P)$ from a particular direction, then $P\mathbf{v}$ is the shadow projected by the vector $\mathbf{v}$.

If $\mathbf{v}\in\operatorname{range}(P)$, then $P\mathbf{v}$ lies precisely on its own shadow. Let $\mathbf{x} = P\mathbf{v}$, then

$$
P\mathbf{v} = P^{2}\mathbf{x} = P\mathbf{x} = \mathbf{v}.
$$

---

What direction does the light shine if $\mathbf{v}\neq P\mathbf{v}$?

```{python}
#| label: fig-oblique-projection
#| fig-cap: "Oblique projection"


import matplotlib.pyplot as plt
import numpy as np

# Define the point and the line
point = np.array([3, 1])
line_x = np.linspace(-5, 5, 100)
line_y = -line_x

# Calculate the projection point (not necessarily orthogonal)
projection_point = np.array([-3, 3])

# Create the plot
plt.figure(figsize=(8, 8))
plt.plot(line_x, line_y, label='range(P)')
plt.scatter(point[0], point[1], color='red', label='v')
plt.scatter(projection_point[0], projection_point[1], color='blue', label='Pv')
plt.plot([point[0], projection_point[0]], [point[1], projection_point[1]], 'k--', label='Pv-v')

# Add labels and legend
plt.xlabel('x')
plt.ylabel('y')
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.grid(color='gray', linestyle='--', linewidth=0.5)
plt.legend()

# Show the plot
plt.show()

```

## Complementary Projectors

If $P$ is a projector, $I-P$ is also a projector. The matrix $I-P$ is called the complementary projector to $P$.

## Orthogonal Projectors

An orthogonal projector is one that projects onto a subspace $S_1$ along a space $S_2$ where $S_1$ and $S_2$ are orthogonal.

*Orthogonal projectors are NOT orthogonal matrices*

**Theorem**
A projector $P$ is orthogonal if and only if $P=P^{T}$.

## Projection with an Orthonormal Basis

Let $\{\mathbf{q}_1,\ldots,\mathbf{q}_{n} \}$ be a set of or $n$ orthonormal vectors in $\mathbb{R}^{m}$. Recall that any vector 
$\mathbf{v}$ has the decomposition
$$
\mathbf{v} = \mathbf{r} + \sum_{i=1}(\mathbf{q}_{i}\mathbf{q}_{i}^{*})\mathbf{v},
$$
where $\mathbf{r}$ is orthogonal to $\{\mathbf{q}_1,\ldots,\mathbf{q}_{n} \}$.

---

Define 

$$
Q = 
\begin{bmatrix}
\vert & & \vert \\
\mathbf{q}_{1} & \cdots& \mathbf{q_{n}} \\
\vert & & \vert \\
\end{bmatrix},
$$

then $QQ^{T}$ is an orthogonal projector onto $\operatorname{ranger}(Q)$. As long as the columns of $Q$ are orthonormal any product of this form projects onto the column space of $Q$.

Note that $I-QQ^{T}$ is also an orthogonal projector and projects onto the space orthogonal to $\operatorname{ranger}(Q)$.

---

Here is an important example of an orthogonal projector:

$$
P_{q} = \mathbf{q}\mathbf{q}^{T}. 
$$


The matrix $P_{q}$ is a rank one orthogonal projector that isolates the component of a vector in the direction of $\mathbf{q}$.

---

Can we reconstruct $Q$ from $P_{q_i}$?

---

Here is another important example of an orthogonal projector:
$$
P_{\perp q} = I-\mathbf{q}\mathbf{q}^{T}. 
$$

The matrix $P_{\perp q}$ is the rank $m-1$ orthogonal projector which eliminates components of a vector in the direction of $q$.
It is the complementary projector of $P_{q}$.

---

For an arbitrary non-unit vector $\mathbf{a}$, the analogous operators are

$$
P_{a} = \mathbf{a}\mathbf{a}^{T},
$$

and

$$
P_{\perp a} = I-\mathbf{a}\mathbf{a}^{T}. 
$$

## Projection with an Arbitrary Basis

It is also possible to construct an orthogonal projector onto a subspace of $\mathbb{R}^{m}$ from an arbitrary basis. Suppose that we have a linearly independent set of vectors $\{\mathbf{a}_1,\ldots, \mathbf{a}_{n} \}$ spanning this subspace.

Let $\mathbf{v}$ be an arbitrary vector in $\mathbb{R}^{m}$ and let $\mathbf{y}\in\operatorname{range}(A)$ be the orthogonal projection of $\mathbf{v}$ into the column space.

The difference $\mathbf{y}-\mathbf{v}$ is orthogonal to $\operatorname{range}(A)$.

Can you visualize this?

---

By the definition of orthogonality it must be true that for all $j=1,\ldots,n$

$$
\mathbf{a}_{j}^{T}(\mathbf{y}-\mathbf{v}) = 0.
$$

If we write $\mathbf{y} = A\mathbf{x}$, then equivalently

$$
A^{T}(A\mathbf{x}-\mathbf{v}) = 0.
$$

---

The matrix $A$ has n linearly independent columns, so it must have full rank. This implies that $A^{T}A$ is invertible, thus we can show

$$
\mathbf{x} = (A^{T}A)^{-1}A^{T}\mathbf{v}.
$$

Consequently, $\mathbf{y} = A(A^{T}A)^{-1}A^{T}\mathbf{v}$ and so for an arbitrary basis, the orthogonal projector onto $\operatorname{range}(A)$ is

$$
P = A(A^{T}A)^{-1}A^{T}.
$$


## Examples

Consider the following vector $\mathbf{v} = \begin{bmatrix} 1 & 2 \end{bmatrix}$ and orthonormal vector $\mathbf{q}_{1}=
\frac{1}{\sqrt{2}}\begin{bmatrix} 1 & 1 \end{bmatrix}$.

Let's visualize the orthogonal projection of $\mathbf{v}$ onto $q_{1}$ and the orthogonal complement

---

```{python}
import numpy as np
import matplotlib.pyplot as plt

# Define the vector v
v = np.array([1, 2])

# Define the orthonormal set of vectors S
u1 = np.array([1/np.sqrt(2), 1/np.sqrt(2)])

# Calculate the projection of v onto u1 
Pq = np.outer(u1, u1)
proj_v_u1 = Pq @ u1

#Calculate the complementary projection
Pq_perp = np.eye(2) - Pq
proj_v_perp = Pq_perp @ v

# Plot the original vector v
plt.quiver(0, 0, v[0], v[1], angles='xy', scale_units='xy', scale=1, color='r', label='v')

# Plot the projections of Pq @ v and (I-Pq) @ v
plt.quiver(0, 0, proj_v_u1[0], proj_v_u1[1], angles='xy', scale_units='xy', scale=1, color='c', label='proj_v_u1')
plt.quiver(0, 0, proj_v_perp[0], proj_v_perp[1], angles='xy', scale_units='xy', scale=1, color='m', label='proj_v_perp')

# Set the limits and labels
plt.xlim(-2, 2)
plt.ylim(-2, 2)
plt.axhline(0, color='grey', lw=0.5)
plt.axvline(0, color='grey', lw=0.5)
plt.grid(True)
plt.legend()
plt.title('Projection of vector v')
plt.xlabel('x')
plt.ylabel('y')

inner_product = np.dot(proj_v_u1, proj_v_perp)

plt.text(-0.5, -1.5, f"$\\text{{Inner product between }} P_{{\\mathbf{{q}}_1}} \\mathbf{{v}} \\text{{ and }} (I - P_{{\\mathbf{{q}}_1}}) \\mathbf{{v}}: {inner_product:.2f}$", fontsize=12, bbox=dict(facecolor='white', alpha=0.5))

# Show the plot
plt.show()
```

---

Let's visualize the projection of the vector $\mathbf{v} = [1, 2, 3]^{T}$ onto the range of

$$
A =
\begin{bmatrix}
1 & 0 \\
0 & 1 \\
1 & 0 \\
\end{bmatrix}.
$$

---

```{python}
#| fig-align: center
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Define the vector v and matrix A
v = np.array([1, 2, 3])
A = np.array([[1, 0], [0, 1], [1, 0]])

# Compute the projection of v onto the column space of A
A_T = A.T
proj_matrix = A @ np.linalg.inv(A_T @ A) @ A_T
proj_v = proj_matrix @ v

# Define the basis vectors of the column space of A
basis_vectors = A.T

# Create the 3D plot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plot the original vector v
ax.quiver(0, 0, 0, v[0], v[1], v[2], color='r', label='Original vector v')

# Plot the projection of v onto the column space of A
ax.quiver(0, 0, 0, proj_v[0], proj_v[1], proj_v[2], color='b', label='Projection of v')

# Plot the basis vectors of the column space of A
for vec in basis_vectors:
    ax.quiver(0, 0, 0, vec[0], vec[1], vec[2], color='g', label='Basis vector of col(A)')

# Plot the plane spanned by the column space of A
x = np.linspace(-1, 2, 10)
y = np.linspace(-1, 2, 10)
X, Y = np.meshgrid(x, y)
Z = X  # Since the plane is spanned by [1, 0, 1] and [0, 1, 0]

ax.plot_surface(X, Y, Z, alpha=0.5, color='y', rstride=100, cstride=100)

# Add a dashed line connecting the original vector to its projection
ax.plot([v[0], proj_v[0]], [v[1], proj_v[1]], [v[2], proj_v[2]], 'k--', label='Orthogonal component')

# Set labels
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

# Set the legend
ax.legend()

# Show the plot
plt.show()
```

## Summary

We covered

- Orthogonal/Orthonormal vectors
- Orthogonal/Orthonormal matrices
- Defined orthogonal/oblique projectors
- Defined projection with orthogonal and arbitrary bases


