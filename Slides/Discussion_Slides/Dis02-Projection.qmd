---
title: "Week 3: Projection"
author: "Yuke Zhang"
---

## Create a session accessing Jupyter Notebook
Search SCC ondemand, login through BU account

:::: {.incremental} 
1.  Access /projectnb/ds722/student/<username>
    - Click "**Files**" and select **/projectnb/ds722** and select **student** subfolder
    - Upload new DiscussionWeek3.ipynb from Piazza Resources to the SCC folder
2. Click "**Interactive apps**"
    - List of modules to load (space separated) = 
        - **miniconda** 
        - **academic-ml/fall-2025**
    - Pre-Launch Command (optional) = **conda activate fall-2025-pyt**
    - Interface = **lab**
    - Working Directory = **/projectnb/ds722/student/[username]**
    - Number of hours = **2**
    - Number of cores = **1**
    - Number of gpus = **0**
    (In order to use gpu,  just specify Number of gpus = **1** in another session)
    - Projects = **ds722**
3. Add Discussion notebook to SCC
::::

## Discussion on Projection onto a line
Let $\mathbf{x}, \mathbf{y}\in\mathbb{R}^{n}$

- Projection is a *linear transformation*, denoted as $P$
    - Project vector $\mathbf{y}$ onto vector space of $\mathbf{x}$: $P\mathbf{y}$
    - $P$ is defined using $\mathbf{x}$
- Projected vector $P\mathbf{y}$ can be viewed as shadow vector
    - For any vector $\mathbf{v}\in\mathbb{R}^n$, 
    $\mathbf{v} = ||\mathbf{v}|| \cdot \frac{\mathbf{v}}{||\mathbf{v}||}$
    - shadow length = $||\mathbf{y}||\cos(\theta)$
    - unit vector along direction of $\mathbf{x}$ = $\frac{\mathbf{x}}{||\mathbf{x}||}$

## Discussion on Projection onto a line
```{python}
import numpy as np
import matplotlib.pyplot as plt

# Define two 2D vectors
x = np.array([2, 0])
y = np.array([1, 3])

# Compute the projection of y onto x
proj_scalar = np.dot(y, x) / np.dot(x, x)
proj_y_on_x = proj_scalar * x

# Plot the vectors
plt.figure(figsize=(6,6))
plt.quiver(0, 0, x[0], x[1], angles='xy', scale_units='xy', \
    scale=1, color='r', label=r'$\mathbf{x}$')
plt.quiver(0, 0, y[0], y[1], angles='xy', scale_units='xy', \
    scale=1, color='b', label=r'$\mathbf{y}$')
plt.quiver(0, 0, proj_y_on_x[0], proj_y_on_x[1], angles='xy', \
    scale_units='xy', scale=1, color='g',
           label=r'$\mathrm{proj}_{\mathbf{x}}\mathbf{y} = '
           +r'\frac{\mathbf{x}^T\mathbf{y}}{\mathbf{x}^T\mathbf{x}}\mathbf{x}$')

# Compute the cosine of the angle between x and y
cos_theta = np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y))

# Add a label for the cosine of the angle
plt.text(0.1, 0.1, f"$\\cos(\\theta)$", fontsize=12)


# Draw dashed line from y to its projection on x
plt.plot([y[0], proj_y_on_x[0]], [y[1], proj_y_on_x[1]], 'k--', \
    label='Orthogonal component')

plt.xlim(-1, 4)
plt.ylim(-1, 4)
plt.xlabel('x')
plt.ylabel('y')
plt.grid(True)
plt.legend()
plt.title(r'Inner Product and Projection of $\mathbf{y}$ onto $\mathbf{x}$')

plt.show()
```

## Discussion on Projection onto a line
\begin{align*}
P\mathbf{y}
& = \frac{\mathbf{x}}{||\mathbf{x}||}||\mathbf{y}||\cos(\theta) \\
& = \frac{\mathbf{x}||\mathbf{x}||}{||\mathbf{x}||^2}||\mathbf{y}||\cos(\theta) \\
& = \frac{\mathbf{x}\mathbf{x}^\top\mathbf{y}}{||\mathbf{x}||^2}
\end{align*}
Then $$P = \frac{\mathbf{x}\mathbf{x}^\top}{||\mathbf{x}||^2}$$

## Discussion on Projection onto a line
Here projection matrix is $$P = \frac{\mathbf{x}\mathbf{x}^\top}{||\mathbf{x}||^2} = \frac{\mathbf{x}\mathbf{x}^\top}{\mathbf{x}^\top \mathbf{x}}$$

When $||\mathbf{x}|| = 1$, 
$$P\mathbf{x} = \mathbf{x}\mathbf{x}^\top\mathbf{y} = (\mathbf{x}\mathbf{x}^\top)\mathbf{y}$$
here $P = \mathbf{x}\mathbf{x}^\top$ where $||\mathbf{x}|| = 1$ can be viewed as a projector.

## Discussion on Projection onto a line
Let's check the property.

\begin{align*}
P^2 
& = (\mathbf{x}\mathbf{x}^\top)^\top (\mathbf{x} \mathbf{x}^\top)\\
& = \mathbf{x}^\top \mathbf{x} \mathbf{x} \mathbf{x}^\top\\
& = ||\mathbf{x}||^2 \mathbf{x}\mathbf{x}^\top \\
& = \mathbf{x}\mathbf{x}^\top = P\\
\end{align*}
Thus, $P^2 = P$ also holds

## Discussion on Projection onto a plane
since $||\mathbf{x}|| = \sqrt{\mathbf{x}^\top \mathbf{x}}$
Similarly, 
using $$P = \frac{\mathbf{x}\mathbf{x}^\top}{\mathbf{x}^\top \mathbf{x}}$$
We can have analogy for matrix
$$P = A(A^\top A)^{-1}A^\top$$



## Hint

Let's visualize the projection of the vector $\mathbf{v} = [1, 2, 3]^{T}$ onto the range of

$$
A =
\begin{bmatrix}
1 & 0 \\
0 & 1 \\
1 & 0 \\
\end{bmatrix}.
$$

---

```{python}
#| fig-align: center
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Define the vector v and matrix A
v = np.array([1, 2, 3])
A = np.array([[1, 0], [0, 1], [1, 0]])

# Compute the projection of v onto the column space of A
A_T = A.T
proj_matrix = A @ np.linalg.inv(A_T @ A) @ A_T
proj_v = proj_matrix @ v

# Define the basis vectors of the column space of A
basis_vectors = A.T

# Create the 3D plot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plot the original vector v
ax.quiver(0, 0, 0, v[0], v[1], v[2], color='r', label=r'$\mathbf{v}$')

# Plot the projection of v onto the column space of A
ax.quiver(0, 0, 0, proj_v[0], proj_v[1], proj_v[2], color='b', \
    label=r'$A(A^{T}A)^{-1}A^{T}\mathbf{v}$')

# Plot the basis vectors of the column space of A
for i, vec in enumerate(basis_vectors):
    ax.quiver(0, 0, 0, vec[0], vec[1], vec[2], color='g', \
        label=fr'$\mathbf{{a}}_{{{i+1}}}$')

# Plot the plane spanned by the column space of A
x = np.linspace(-1, 2, 10)
y = np.linspace(-1, 2, 10)
X, Y = np.meshgrid(x, y)
Z = X  # Since the plane is spanned by [1, 0, 1] and [0, 1, 0]

ax.plot_surface(X, Y, Z, alpha=0.5, color='y', rstride=100, cstride=100)

# Add a dashed line connecting the original vector to its projection
ax.plot([v[0], proj_v[0]], [v[1], proj_v[1]], [v[2], proj_v[2]], \
    'k--', label='Orthogonal component')

# Set labels
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

# Set the legend
ax.legend()

# Show the plot
plt.show()
```
